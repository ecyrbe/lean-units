import LeanUnits.Framework.Dimensions.Basic
import LeanUnits.Framework.Dimensions.Tactic
import LeanUnits.Framework.Conversions.Basic
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs
namespace Units

variable {Œ± Œ¥ : Type} [AddCommGroup Œ¥] [Repr Œ¥]

structure Quantity (dim : Œ¥) (Œ± : Type) [AddCommGroup Œ¥] where
    val : Œ±
    deriving Inhabited, BEq, DecidableEq

namespace Quantity

-- ### Operations on Quantities
variable {d d‚ÇÅ d‚ÇÇ : Œ¥}

unsafe instance [Repr Œ±] : Repr (Quantity d Œ±) where
  reprPrec q _ := s!"{repr q.val} ‚Ä¢ {repr d}"

unsafe instance [Repr Œ±] : ToString (Quantity d Œ±) where
  toString q := reprStr q

instance [Zero Œ±] : Zero (Quantity d Œ±) where
  zero := ‚ü® 0 ‚ü©

instance [One Œ±] : One (Quantity d Œ±) where
  one := ‚ü® 1 ‚ü©

def add [Add Œ±] (q1 q2 : Quantity d Œ±) : Quantity d Œ± := ‚ü® q1.val + q2.val ‚ü©

instance [Add Œ±] : Add (Quantity d Œ±) where
  add := add

def sub [Sub Œ±] (q1 q2 : Quantity d Œ±) : Quantity d Œ± := ‚ü® q1.val - q2.val ‚ü©

instance [Sub Œ±] : Sub (Quantity d Œ±) where
  sub := sub

def neg [Neg Œ±] (q : Quantity d Œ±) : Quantity d Œ± := ‚ü® - q.val ‚ü©

instance [Neg Œ±] : Neg (Quantity d Œ±) where
  neg := neg

def hMul [Mul Œ±] (q1 : Quantity d‚ÇÅ Œ±) (q2 : Quantity d‚ÇÇ Œ±) : Quantity (d‚ÇÅ + d‚ÇÇ) Œ± :=
  ‚ü® q1.val * q2.val ‚ü©

instance [Mul Œ±] : HMul (Quantity d‚ÇÅ Œ±) (Quantity d‚ÇÇ Œ±) (Quantity (d‚ÇÅ + d‚ÇÇ) Œ±) where
  hMul := hMul

def hDiv [Div Œ±] (q1 : Quantity d‚ÇÅ Œ±) (q2 : Quantity d‚ÇÇ Œ±) : Quantity (d‚ÇÅ - d‚ÇÇ) Œ± :=
    ‚ü® q1.val / q2.val ‚ü©

instance [Div Œ±] : HDiv (Quantity d‚ÇÅ Œ±) (Quantity d‚ÇÇ Œ±) (Quantity (d‚ÇÅ - d‚ÇÇ) Œ±) where
  hDiv := hDiv

def sMul [SMul Œ± Œ±] (s : Œ±) (q : Quantity d Œ±) : Quantity d Œ± := ‚ü® s ‚Ä¢ q.val ‚ü©

instance [SMul Œ± Œ±] : SMul Œ± (Quantity d Œ±) where
    smul := sMul

def npow [Pow Œ± ‚Ñï] (q : Quantity d Œ±) (n : ‚Ñï) : Quantity (n‚Ä¢d) Œ± := ‚ü® q.val ^ n ‚ü©

def zpow [Pow Œ± ‚Ñ§] (q : Quantity d Œ±) (n : ‚Ñ§) : Quantity (n‚Ä¢d) Œ± := ‚ü® q.val ^ n ‚ü©

def qpow [Pow Œ± ‚Ñö] [SMul ‚Ñö Œ¥] (q : Quantity d Œ±) (n : ‚Ñö) : Quantity (n‚Ä¢d) Œ± := ‚ü® q.val ^ n ‚ü©

instance [Pow Œ± ‚Ñï] : DPow (Quantity d Œ±) ‚Ñï (fun n => Quantity (n ‚Ä¢ d) Œ±) where
  pow := npow

instance [Pow Œ± ‚Ñ§] : DPow (Quantity d Œ±) ‚Ñ§ (fun n => Quantity (n ‚Ä¢ d) Œ±) where
  pow := zpow

instance [Pow Œ± ‚Ñö] [SMul ‚Ñö Œ¥] : DPow (Quantity d Œ±) ‚Ñö (fun n => Quantity (n ‚Ä¢ d) Œ±) where
  pow := qpow

def inv [Inv Œ±] (q : Quantity d Œ±) : Quantity (-d) Œ± := ‚ü® q.val‚Åª¬π ‚ü©

def fun_to_val (f : Quantity d‚ÇÅ Œ± ‚Üí Quantity d‚ÇÇ Œ±) : Œ± ‚Üí Œ± := fun x => (f ‚ü®x‚ü©).val

-- derivative
noncomputable def deriv [NontriviallyNormedField Œ±]
  (f : Quantity d‚ÇÅ Œ± ‚Üí Quantity d‚ÇÇ Œ±) (x : Quantity d‚ÇÅ Œ±) : Quantity (d‚ÇÇ-d‚ÇÅ) Œ± :=
  ‚ü®_root_.deriv (fun_to_val f) x.val‚ü©

-- integral
noncomputable def integral [NormedAddCommGroup Œ±] [NormedSpace ‚Ñù Œ±] [MeasurableSpace Œ±]
  (f : Quantity d‚ÇÅ Œ± ‚Üí Quantity d‚ÇÇ Œ±) (Œº : MeasureTheory.Measure Œ±) : Quantity (d‚ÇÅ+d‚ÇÇ) Œ± :=
  ‚ü®MeasureTheory.integral Œº (fun_to_val f)‚ü©

-- order
def lt [LT Œ±] (q1 q2 : Quantity d Œ±) : Prop := q1.val < q2.val

instance [LT Œ±] : LT (Quantity d Œ±) where
    lt := lt

def le [LE Œ±] (q1 q2 : Quantity d Œ±) : Prop := q1.val ‚â§ q2.val

instance [LE Œ±] : LE (Quantity d Œ±) where
    le := le

def dimension [HasDimension Œ¥] (_ : Quantity d Œ±) : Dimension := ùíü d
def conversion [HasConversion Œ¥] (_ : Quantity d Œ±) : Conversion := ùíû d
def units (_ : Quantity d Œ±) : Œ¥ := d

instance [HasDimension Œ¥] : HasDimension (Quantity d Œ±) where
  dimension := dimension

instance [HasConversion Œ¥] : HasConversion (Quantity d Œ±) where
  conversion := conversion

-- cast operator prefix
/--
Preferred notation for casting: write `‚Üëx` instead of `cast x`.

- Purpose: `‚Üëx` is equivalent to `cast x` and is the idiomatic, preferred syntax
    throughout this library. Please use this notation in new code and docs.
- Precedence: the operator has high priority and binds tightly; use parentheses
    when needed, e.g. `‚Üë(f x)` or `(‚Üëx).field`.
- Typing the symbol: in Lean/VSCode, type `\uparrow` then space to get `‚Üë`.

Examples:
- `let q' : Quantity Œ≤ := ‚Üëq`    -- preferred
- -- instead of: `cast q`
-/
def cast [HasEquiv Œ¥] (q : Quantity d‚ÇÅ Œ±) (_ : d‚ÇÅ ‚âà d‚ÇÇ := by auto_equiv) : Quantity d‚ÇÇ Œ± := ‚ü®q.val‚ü©

/--
convert from one quantity to another of the same dimension

Preferred notation for convert: write `q ‚Üí` instead of `convert q`.
- Purpose: `q ‚Üí` is equivalent to `convert q` and is the idiomatic, preferred syntax
    throughout this library. Please use this notation in new code and docs.

Examples:
- `let q' : Quantity d‚ÇÇ Œ± := q ‚Üí`    -- preferred
- -- instead of: `convert q`
-/
def convert [RatCast Œ±] [Mul Œ±] [Add Œ±] [HasDimension Œ¥] [HasConversion Œ¥]
 (q : Quantity d‚ÇÅ Œ±) (_ : ùíü d‚ÇÅ = ùíü d‚ÇÇ := by auto_dim) : Quantity d‚ÇÇ Œ± :=
  ‚ü®Conversion.convert (ùíû d‚ÇÅ) (ùíû d‚ÇÇ) q.val‚ü©

/--
convert and cast in one step from one quantity to another of the same dimension
the target is a unit

Examples:
 convert constant c from natural unit to meter per second: c.into (Unit.meter-Unit.second)
-/
def into [RatCast Œ±] [Mul Œ±] [Add Œ±] [HasDimension Œ¥] [HasConversion Œ¥]
 (q : Quantity d Œ±) (target : Œ¥) (_ : ùíü d = ùíü target := by auto_dim) : Quantity target Œ± :=
  ‚ü®Conversion.convert (ùíû d) (ùíû target) q.val‚ü©

/--
convert and cast in one step from one quantity to another of the same dimension
the target is another quantity

Examples:
- `let q' : Quantity (Unit.meter-Unit.second) Float := q.as (m/s)`
-/
def as [RatCast Œ±] [Mul Œ±] [Add Œ±] [HasDimension Œ¥] [HasConversion Œ¥]
 (q : Quantity d‚ÇÅ Œ±) (_ : Quantity d‚ÇÇ Œ±) (_ : ùíü d‚ÇÅ = ùíü d‚ÇÇ := by auto_dim) : Quantity d‚ÇÇ Œ± :=
  ‚ü®Conversion.convert (ùíû d‚ÇÅ) (ùíû d‚ÇÇ) q.val‚ü©


@[inherit_doc cast]
prefix:100 (priority := high) "‚Üë" => cast

@[inherit_doc convert]
postfix:100 (priority := high) "‚Üí" => convert

-- notation for dependent power
-- example (q : Quantity d ‚Ñù) (n : ‚Ñï) : q^·µàn = q.npow n := rfl
-- example (q : Quantity d ‚Ñù) (n : ‚Ñ§) : q^·µàn = q.zpow n := rfl
-- example [Pow ‚Ñù ‚Ñö] [SMul ‚Ñö Œ¥] (q : Quantity d ‚Ñù) (n : ‚Ñö) : q ^·µà n * q = q.qpow n * q := rfl

-- positive powers as superscript
postfix:max (priority := high) "¬≤" => npow (n := 2)
postfix:max (priority := high) "¬≥" => npow (n := 3)
postfix:max (priority := high) "‚Å¥" => npow (n := 4)
postfix:max (priority := high) "‚Åµ" => npow (n := 5)
postfix:max (priority := high) "‚Å∂" => npow (n := 6)
postfix:max (priority := high) "‚Å∑" => npow (n := 7)
postfix:max (priority := high) "‚Å∏" => npow (n := 8)
postfix:max (priority := high) "‚Åπ" => npow (n := 9)
-- negative powers as superscript
postfix:max (priority := high) "‚Åª¬≤" => zpow (n := -2)
postfix:max (priority := high) "‚Åª¬≥" => zpow (n := -3)
postfix:max (priority := high) "‚Åª‚Å¥" => zpow (n := -4)
postfix:max (priority := high) "‚Åª‚Åµ" => zpow (n := -5)
postfix:max (priority := high) "‚Åª‚Å∂" => zpow (n := -6)
postfix:max (priority := high) "‚Åª‚Å∑" => zpow (n := -7)
postfix:max (priority := high) "‚Åª‚Å∏" => zpow (n := -8)
postfix:max (priority := high) "‚Åª‚Åπ" => zpow (n := -9)
-- inverse as superscript
postfix:max (priority := high) "‚Åª¬π" => inv

end Quantity

end Units
