import LeanUnits.Framework.Dimensions.Basic
import LeanUnits.Framework.Dimensions.Tactic
import LeanUnits.Framework.Conversion
import LeanUnits.Math
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs
namespace Units

variable {Œ± Œ¥ : Type} [AddCommGroup Œ¥] [Repr Œ¥]

structure Quantity (dim : Œ¥) (Œ± : Type) [AddCommGroup Œ¥] where
    val : Œ±
    deriving Inhabited, BEq, DecidableEq

namespace Quantity
open Units.Math

-- ### Operations on Quantities
variable {d d‚ÇÅ d‚ÇÇ : Œ¥}

unsafe instance [Repr Œ±] : Repr (Quantity d Œ±) where
  reprPrec q _ := s!"{repr q.val} ({repr d})"

unsafe instance [Repr Œ±] : ToString (Quantity d Œ±) where
  toString q := reprStr q

instance [Zero Œ±] : Zero (Quantity d Œ±) where
  zero := ‚ü® 0 ‚ü©

instance [One Œ±] : One (Quantity d Œ±) where
  one := ‚ü® 1 ‚ü©

def add [Add Œ±] (q1 q2 : Quantity d Œ±) : Quantity d Œ± :=
    { val := q1.val + q2.val }

instance [Add Œ±] : Add (Quantity d Œ±) where
  add := add

def sub [Sub Œ±] (q1 q2 : Quantity d Œ±) : Quantity d Œ± :=
    { val := q1.val - q2.val }

instance [Sub Œ±] : Sub (Quantity d Œ±) where
  sub := sub

def neg [Neg Œ±] (q : Quantity d Œ±) : Quantity d Œ± :=
    { val := -q.val }

instance [Neg Œ±] : Neg (Quantity d Œ±) where
  neg := neg

def hMul [Mul Œ±] (q1 : Quantity d‚ÇÅ Œ±) (q2 : Quantity d‚ÇÇ Œ±) : Quantity (d‚ÇÅ + d‚ÇÇ) Œ± :=
    { val := q1.val * q2.val }

instance [Mul Œ±] : HMul (Quantity d‚ÇÅ Œ±) (Quantity d‚ÇÇ Œ±) (Quantity (d‚ÇÅ + d‚ÇÇ) Œ±) where
  hMul := hMul

def hDiv [Div Œ±] (q1 : Quantity d‚ÇÅ Œ±) (q2 : Quantity d‚ÇÇ Œ±) : Quantity (d‚ÇÅ - d‚ÇÇ) Œ± :=
    { val := q1.val / q2.val }

instance [Div Œ±] : HDiv (Quantity d‚ÇÅ Œ±) (Quantity d‚ÇÇ Œ±) (Quantity (d‚ÇÅ - d‚ÇÇ) Œ±) where
  hDiv := hDiv

def sMul [SMul Œ± Œ±] (s : Œ±) (q : Quantity d Œ±) : Quantity d Œ± :=
    { val := s ‚Ä¢ q.val }

instance [SMul Œ± Œ±] : SMul Œ± (Quantity d Œ±) where
    smul := sMul

def hInvSquare [Inv Œ±] [Mul Œ±] (q : Quantity d Œ±) : Quantity (-2‚Ä¢d) Œ± :=
    let inverse := q.val‚Åª¬π
    { val := inverse * inverse }

instance [Inv Œ±] [Mul Œ±] : HIntPow (Quantity d Œ±) (-2) (Quantity (-2‚Ä¢d) Œ±) where
    hIntPow := hInvSquare

def hInv [Inv Œ±] (q : Quantity d Œ±) : Quantity (-d) Œ± :=
    { val := Inv.inv q.val }

instance [Inv Œ±] : HIntPow (Quantity d Œ±) (-1) (Quantity (-d) Œ±) where
    hIntPow := hInv


def hSquare [Mul Œ±] (q : Quantity d Œ±) : Quantity (2‚Ä¢d) Œ± :=
    { val := q.val * q.val }

instance [Mul Œ±] : HIntPow (Quantity d Œ±) 2 (Quantity (2‚Ä¢d) Œ±) where
    hIntPow := hSquare

def hCubic [Mul Œ±] (q : Quantity d Œ±) : Quantity (3‚Ä¢d) Œ± :=
    { val := q.val * q.val * q.val }

instance [Mul Œ±] : HIntPow (Quantity d Œ±) 3 (Quantity (3‚Ä¢d) Œ±) where
    hIntPow := hCubic

def hQuartic [Mul Œ±] (q : Quantity d Œ±) : Quantity (4‚Ä¢d) Œ± :=
    { val := q.val * q.val * q.val * q.val }

instance [Mul Œ±] : HIntPow (Quantity d Œ±) 4 (Quantity (4‚Ä¢d) Œ±) where
    hIntPow := hQuartic

def hQuintic [Mul Œ±] (q : Quantity d Œ±) : Quantity (5‚Ä¢d) Œ± :=
    { val := q.val * q.val * q.val * q.val * q.val }

instance [Mul Œ±] : HIntPow (Quantity d Œ±) 5 (Quantity (5‚Ä¢d) Œ±) where
    hIntPow := hQuintic

-- square root
def hSqrt [HSqrt Œ± Œ±] [SMul ‚Ñö Œ¥] (q : Quantity d Œ±) : Quantity ((1/2:‚Ñö)‚Ä¢d) Œ± :=
    { val := ‚àöq.val }

instance [HSqrt Œ± Œ±] [SMul ‚Ñö Œ¥] : HSqrt (Quantity d Œ±) (Quantity ((1/2:‚Ñö)‚Ä¢d) Œ±) where
    hSqrt := hSqrt

def fun_to_val (f : Quantity d‚ÇÅ Œ± ‚Üí Quantity d‚ÇÇ Œ±) : Œ± ‚Üí Œ± :=
    fun x => (f ‚ü®x‚ü©).val

-- derivative
noncomputable def deriv [NontriviallyNormedField Œ±]
  (f : Quantity d‚ÇÅ Œ± ‚Üí Quantity d‚ÇÇ Œ±) (x : Quantity d‚ÇÅ Œ±) : Quantity (d‚ÇÇ-d‚ÇÅ) Œ± :=
  ‚ü®_root_.deriv (fun_to_val f) x.val‚ü©

-- integral
noncomputable def integral [NormedAddCommGroup Œ±] [NormedSpace ‚Ñù Œ±] [MeasurableSpace Œ±]
  (f : Quantity d‚ÇÅ Œ± ‚Üí Quantity d‚ÇÇ Œ±) (Œº : MeasureTheory.Measure Œ±) : Quantity (d‚ÇÅ+d‚ÇÇ) Œ± :=
  ‚ü®MeasureTheory.integral Œº (fun_to_val f)‚ü©

-- order
def lt [LT Œ±] (q1 q2 : Quantity d Œ±) : Prop :=
    q1.val < q2.val

instance [LT Œ±] : LT (Quantity d Œ±) where
    lt := lt

def le [LE Œ±] (q1 q2 : Quantity d Œ±) : Prop :=
    q1.val ‚â§ q2.val

instance [LE Œ±] : LE (Quantity d Œ±) where
    le := le

def dimension [HasDimension Œ¥] (_ : Quantity d Œ±) : Dimension := ùíü d
def conversion [HasConversion Œ¥] (_ : Quantity d Œ±) : Conversion := ùíû d
def units (_ : Quantity d Œ±) : Œ¥ := d

-- cast operator prefix
/--
Preferred notation for casting: write `‚Üëx` instead of `cast x`.

- Purpose: `‚Üëx` is equivalent to `cast x` and is the idiomatic, preferred syntax
    throughout this library. Please use this notation in new code and docs.
- Precedence: the operator has high priority and binds tightly; use parentheses
    when needed, e.g. `‚Üë(f x)` or `(‚Üëx).field`.
- Typing the symbol: in Lean/VSCode, type `\uparrow` then space to get `‚Üë`.

Examples:
- `let q' : Quantity Œ≤ := ‚Üëq`    -- preferred
- -- instead of: `cast q`
-/
def cast [HasEquiv Œ¥] (q : Quantity d‚ÇÅ Œ±) (_ : d‚ÇÅ ‚âà d‚ÇÇ := by auto_equiv)
 : Quantity d‚ÇÇ Œ± := ‚ü®q.val‚ü©

/--
convert from one quantity to another of the same dimension

Preferred notation for convert: write `q ‚Üí` instead of `convert q`.
- Purpose: `q ‚Üí` is equivalent to `convert q` and is the idiomatic, preferred syntax
    throughout this library. Please use this notation in new code and docs.

Examples:
- `let q' : Quantity d‚ÇÇ Œ± := q ‚Üí`    -- preferred
- -- instead of: `convert q`
-/
def convert [Coe ‚Ñö Œ±] [Mul Œ±] [Add Œ±] [HasDimension Œ¥] [HasConversion Œ¥]
 (q : Quantity d‚ÇÅ Œ±) (_ : ùíü d‚ÇÅ = ùíü d‚ÇÇ := by auto_dim) :
 Quantity d‚ÇÇ Œ± := ‚ü®((ùíû d‚ÇÅ)/(ùíû d‚ÇÇ) ) ‚äô q.val‚ü©

/--
convert and cast in one step from one quantity to another of the same dimension
the target is a unit

Examples:
 convert constant c from natural unit to meter per second: c.into (Unit.meter-Unit.second)
-/
def into [Coe ‚Ñö Œ±] [Mul Œ±] [Add Œ±] [HasDimension Œ¥] [HasConversion Œ¥]
 (q : Quantity d Œ±) (target : Œ¥) (_ : ùíü d = ùíü target := by auto_dim) :
 Quantity target Œ± := ‚ü®((ùíû d)/(ùíû target)) ‚äô q.val‚ü©

/--
convert and cast in one step from one quantity to another of the same dimension
the target is another quantity

Examples:
- `let q' : Quantity (Unit.meter-Unit.second) Float := q.as (m/s)`
-/
def as [Coe ‚Ñö Œ±] [Mul Œ±] [Add Œ±] [HasDimension Œ¥] [HasConversion Œ¥]
 (q : Quantity d‚ÇÅ Œ±) (_ : Quantity d‚ÇÇ Œ±) (_ : ùíü d‚ÇÅ = ùíü d‚ÇÇ := by auto_dim) :
 Quantity d‚ÇÇ Œ± := ‚ü®((ùíû d‚ÇÅ)/(ùíû d‚ÇÇ)) ‚äô q.val‚ü©


@[inherit_doc cast]
prefix:100 (priority := high) "‚Üë" => cast

@[inherit_doc convert]
postfix:100 (priority := high) "‚Üí" => convert

end Quantity

end Units
