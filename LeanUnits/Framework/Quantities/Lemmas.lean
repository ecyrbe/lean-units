import Mathlib.Algebra.MonoidAlgebra.Basic
import Mathlib.Data.Real.Basic
import Mathlib.Algebra.Group.InjSurj
import LeanUnits.Framework.Quantities.Basic
import Mathlib.Tactic

/-!
Credit to @TerrenceTao for these lemmas about Fomalizing quantities into the AddMonoidAlgebra.
The original source code under Apache License is there :
https://github.com/teorth/analysis/blob/18d4fd7253ff17a05133d9b6b120b5f08f5ce6ad/analysis/Analysis/Misc/UnitsSystem.lean
Permission was given to use his lemmas and definitions as a starting point for the formal
side of the library.
-/

namespace Units.Quantity

set_option linter.unusedSectionVars false

-- for Formal we work over a Field like ‚Ñù or ‚Ñö or ‚ÑÇ
variable {Œ± : Type} [Field Œ±]
-- we require Œ¥ to be an AddCommGroup with an equivalence relation
variable {Œ¥ : Type} [AddCommGroup Œ¥] [Setoid Œ¥]
-- here d, d‚ÇÅ, d‚ÇÇ, d‚ÇÉ can be any dimensions or units in Œ¥
variable {d d‚ÇÅ d‚ÇÇ d‚ÇÉ d‚ÇÑ : Œ¥}

theorem dim_eq_dim {d : Œ¥} [HasDimension Œ¥] (q : Quantity d Œ±) :
  ùíü q = ùíü d := by rfl



theorem eq_imp_equiv {Œº} [Setoid Œº] {u1 u2 : Œº} (h : u1 = u2) : u1 ‚âà u2 := by
  rw [h]

@[simp]
theorem val_inj (q‚ÇÅ q‚ÇÇ : Quantity d Œ±) :
  q‚ÇÅ.val = q‚ÇÇ.val ‚Üî q‚ÇÅ = q‚ÇÇ := by
  constructor
  ¬∑ intro h; cases q‚ÇÅ; cases q‚ÇÇ; congr
  ¬∑ intro h; rw [h]

theorem cast_eq (q‚ÇÅ : Quantity d‚ÇÅ Œ±) (q‚ÇÇ : Quantity d‚ÇÇ Œ±) (h : d‚ÇÅ = d‚ÇÇ := by module)
  : q‚ÇÅ.val = q‚ÇÇ.val ‚Üî q‚ÇÅ = q‚ÇÇ.cast (eq_imp_equiv h.symm) := by
  aesop


theorem cast_eq_symm (q‚ÇÅ : Quantity d‚ÇÅ Œ±) (q‚ÇÇ : Quantity d‚ÇÇ Œ±) (h : d‚ÇÅ ‚âà d‚ÇÇ := by module)
  : q‚ÇÅ = q‚ÇÇ.cast (Setoid.symm h) ‚Üî q‚ÇÇ = q‚ÇÅ.cast h := by aesop

@[simp]
theorem cast_val (q : Quantity d‚ÇÅ Œ±) (h : d‚ÇÅ = d‚ÇÇ := by module)
  : (q.cast (eq_imp_equiv h)).val = q.val := by
  subst h
  rfl

@[simp]
theorem val_zero : (0:Quantity d Œ±).val = 0 := rfl

@[simp]
theorem val_one : (1:Quantity d Œ±).val = 1 := rfl

theorem neZero_iff (q : Quantity d Œ±) : NeZero q ‚Üî q.val ‚â† 0 := by
  simp only [_root_.neZero_iff, ne_eq, ‚Üê val_inj, val_zero]

@[simp]
theorem val_add (q‚ÇÅ q‚ÇÇ : Quantity d Œ±) : (q‚ÇÅ + q‚ÇÇ).val = q‚ÇÅ.val + q‚ÇÇ.val := rfl

@[simp]
theorem val_neg (q : Quantity d Œ±) : (-q).val = -q.val := rfl

instance instNeZero_neg (q : Quantity d Œ±) [h : NeZero q] : NeZero (-q) := by
  rw [neZero_iff] at h ‚ä¢
  simp only [val_neg, ne_eq, neg_eq_zero, h, not_false_eq_true]

@[simp]
theorem val_sub (q‚ÇÅ q‚ÇÇ : Quantity d Œ±) : (q‚ÇÅ - q‚ÇÇ).val = q‚ÇÅ.val - q‚ÇÇ.val := rfl

@[simp]
theorem val_smul [SMul Œ± Œ±] (n : Œ±) (q : Quantity d Œ±) : (n ‚Ä¢ q).val = n ‚Ä¢ q.val := rfl

theorem smul_def [SMul Œ± Œ±] (n : Œ±) (q : Quantity d Œ±) : (n ‚Ä¢ q) = ‚ü®n ‚Ä¢ q.val‚ü© := rfl

instance instAddGroup : AddGroup (Quantity d Œ±) where
  zero := Zero.zero
  add := Add.add
  neg := Neg.neg
  sub := Sub.sub
  nsmul n q := { val := n ‚Ä¢ q.val }
  zsmul n q := { val := n ‚Ä¢ q.val }
  zero_add := by
    intro q
    rw [‚Üê val_inj]
    simp only [val_add, val_zero, zero_add]
  add_zero := by
    intro q
    rw [‚Üê val_inj]
    simp only [val_add, val_zero, add_zero]
  add_assoc := by
    intro a b c
    rw [‚Üê val_inj]
    simp only [val_add, add_assoc]
  sub_eq_add_neg := by
    intro a b
    rw [‚Üê val_inj]
    simp only [val_sub, sub_eq_add_neg, val_add, val_neg]
  neg_add_cancel := by
    intro a
    rw [‚Üê val_inj]
    simp only [val_add, val_neg, neg_add_cancel, val_zero]
  nsmul_zero := by
    intro a
    rw [‚Üê val_inj]
    simp only [zero_nsmul, val_zero]
  nsmul_succ := by
    intro n a
    rw [‚Üê val_inj]
    simp only [nsmul_eq_mul, Nat.cast_add, Nat.cast_one, add_mul, one_mul, val_add]
  zsmul_zero' := by
    intro a
    rw [‚Üê val_inj]
    simp only [zero_smul, val_zero]
  zsmul_succ' := by
    intro n a
    rw [‚Üê val_inj]
    simp only [zsmul_eq_mul, Int.cast_natCast, val_add,Nat.cast_succ, add_mul,
    val_add,add_mul, zsmul_eq_mul, Int.cast_add, Int.cast_natCast, Nat.succ_eq_add_one]
    ring
  zsmul_neg' := by
    intro n a
    rw [‚Üê val_inj]
    simp only [Int.negSucc_eq, zsmul_eq_mul, Int.cast_add, Int.cast_neg,
      Int.cast_natCast, Nat.succ_eq_add_one, Nat.cast_add, val_neg, neg_mul,Nat.cast_one]

instance : AddCommGroup (Quantity d Œ±) where
  add_comm := by
    intro a b
    rw [‚Üê val_inj]
    simp only [val_add, add_comm]

@[simp]
theorem val_mul [Mul Œ±] (q‚ÇÅ : Quantity d‚ÇÅ Œ±) (q‚ÇÇ : Quantity d‚ÇÇ Œ±) :
  (q‚ÇÅ * q‚ÇÇ).val = q‚ÇÅ.val * q‚ÇÇ.val := rfl

@[simp]
theorem val_div [Div Œ±] (q‚ÇÅ : Quantity d‚ÇÅ Œ±) (q‚ÇÇ : Quantity d‚ÇÇ Œ±) :
  (q‚ÇÅ / q‚ÇÇ).val = q‚ÇÅ.val / q‚ÇÇ.val := rfl

@[simp]
theorem val_inv [Inv Œ±] (q : Quantity d Œ±) : (q‚Åª¬π).val = Inv.inv q.val := rfl

@[simp]
theorem val_npow [Pow Œ± ‚Ñï] (q : Quantity d Œ±) (n : ‚Ñï) :
  (q.npow n).val = q.val ^ n := rfl

@[simp]
theorem val_zpow [Pow Œ± ‚Ñ§] (q : Quantity d Œ±) (n : ‚Ñ§) :
  (q.zpow n).val = q.val ^ n := rfl

@[simp]
theorem Scalar.val_pow (q : Quantity d Œ±) (n : ‚Ñï) :
  (q ^·µà n).val = q.val ^ n := rfl

@[coe]
def ofField {Œ±} [Field Œ±] (a : Œ±) : Quantity (0: Œ¥) Œ± := ‚ü® a ‚ü©

instance instCoeField : Coe Œ± (Quantity (0: Œ¥) Œ±) where
  coe := ofField

@[simp]
theorem coe_val (a : Œ±) : (a:Quantity (0: Œ¥) Œ±).val = a := rfl

@[norm_cast, simp]
theorem coe_zero : ((0:Œ±):Quantity (0: Œ¥) Œ±) = 0 := rfl

theorem neZero_coe_iff {a : Œ±} : NeZero (a: Quantity (0: Œ¥) Œ±) ‚Üî a ‚â† 0 := by
  simp only [neZero_iff, coe_val, ne_eq]

@[simp]
theorem coe_inj {a b : Œ±} :
  (a:Quantity (0: Œ¥) Œ±) = (b:Quantity (0: Œ¥) Œ±) ‚Üî a = b := by
  rw [ofField, ofField, ‚Üêval_inj]

@[norm_cast, simp]
theorem coe_add (a b : Œ±) :
  ((a+b:Œ±):Quantity (0: Œ¥) Œ±) = (a:Quantity (0: Œ¥) Œ±) + (b:Quantity (0: Œ¥) Œ±) := rfl

@[norm_cast, simp]
theorem coe_neg (a : Œ±) : ((-a:Œ±):Quantity (0: Œ¥) Œ±) = -(a: Quantity (0:Œ¥) Œ±) := rfl

@[norm_cast, simp]
theorem coe_sub (a b : Œ±) :
  ((a-b:Œ±):Quantity (0:Œ¥) Œ±) = (a:Quantity (0:Œ¥) Œ±) - (b:Quantity (0:Œ¥) Œ±) := by
  simp only [ofField]
  rfl

def differentiable [NontriviallyNormedField Œ±]
  (f : Quantity d‚ÇÅ Œ± ‚Üí Quantity d‚ÇÇ Œ±) : Prop := Differentiable Œ± (fun t : Œ± => (f ‚ü®t‚ü©).val)

theorem differentiable_fun_id [NontriviallyNormedField Œ±] :
  differentiable (fun t : Quantity d‚ÇÅ Œ± => t) := by
  rw [differentiable]
  exact _root_.differentiable_fun_id

theorem deriv_qconst [NontriviallyNormedField Œ±] (x : Quantity d‚ÇÅ Œ±) (c : Quantity d‚ÇÇ Œ±) :
  deriv (fun _ => c ) x = 0 := by
  rw [‚Üê val_inj]
  simp only [deriv]
  exact _root_.deriv_const x.val c.val

theorem deriv_id [NontriviallyNormedField Œ±] (x : Quantity d‚ÇÅ Œ±) :
  deriv (fun t => t) x = 1 := by
  rw [‚Üê val_inj]
  simp only [deriv]
  exact _root_.deriv_id x.val

-- to do generalize to Œ±, but we get errors for now
theorem deriv_const_smul_real
  {f : Quantity d‚ÇÅ ‚Ñù ‚Üí Quantity d‚ÇÇ ‚Ñù} {x : Quantity d‚ÇÅ ‚Ñù}
  (c : ‚Ñù) (h_f_diff : differentiable f) :
  deriv (fun t => c ‚Ä¢ f t) x = c ‚Ä¢ deriv f x := by
  rw [‚Üê val_inj]
  simp only [deriv, val_smul]
  exact deriv_const_smul c h_f_diff.differentiableAt

theorem deriv_qconst_mul_real
  (c : Quantity d‚ÇÉ ‚Ñù) (f : Quantity d‚ÇÅ ‚Ñù ‚Üí Quantity d‚ÇÇ ‚Ñù) (x : Quantity d‚ÇÅ ‚Ñù)
  (h_f_diff : differentiable f) :
  deriv (fun t => c * (f t) ) x = ‚Üë(c * deriv f x) := by
  rw [‚Üê val_inj]
  simp only [deriv]
  exact deriv_const_mul c.val h_f_diff.differentiableAt

theorem deriv_add_real
  (f g : Quantity d‚ÇÅ ‚Ñù ‚Üí Quantity d‚ÇÇ ‚Ñù) (x : Quantity d‚ÇÅ ‚Ñù)
  (h_f_diff : differentiable f) (h_g_diff : differentiable g) :
  deriv (f + g) x = deriv f x + deriv g x := by
  rw [‚Üê val_inj]
  simp only [deriv, val_add]
  exact deriv_add (h_f_diff.differentiableAt) (h_g_diff.differentiableAt)

theorem deriv_mul_real
  (f : Quantity d‚ÇÅ ‚Ñù ‚Üí Quantity d‚ÇÇ ‚Ñù) (g : Quantity d‚ÇÅ ‚Ñù ‚Üí Quantity d‚ÇÉ ‚Ñù) (x : Quantity d‚ÇÅ ‚Ñù)
  (h_f_diff : differentiable f) (h_g_diff : differentiable g) :
  deriv (fun t => (f t) * (g t)) x = ‚Üë(deriv f x * g x + ‚Üë(f x * deriv g x)) := by
  rw [‚Üê val_inj]
  simp only [deriv]
  exact deriv_mul (h_f_diff.differentiableAt) (h_g_diff.differentiableAt)

theorem deriv_div_real
  (f : Quantity d‚ÇÅ ‚Ñù ‚Üí Quantity d‚ÇÇ ‚Ñù) (g : Quantity d‚ÇÅ ‚Ñù ‚Üí Quantity d‚ÇÉ ‚Ñù) (x : Quantity d‚ÇÅ ‚Ñù)
  (h_f_diff : differentiable f) (h_g_diff : differentiable g) [h_gx : NeZero (g x)] :
  deriv (fun t => (f t) / (g t)) x =
    ‚Üë((deriv f x * g x - ‚Üë(f x * deriv g x)) / (g x)¬≤) := by
  rw [‚Üê val_inj]
  simp [deriv, cast]
  rw [neZero_iff] at h_gx
  exact deriv_div (h_f_diff.differentiableAt) (h_g_diff.differentiableAt) h_gx

/--
A Quantity can be formalized into an AddMonoidAlgebra
`Formal Œ¥ Œ± = AddMonoidAlgebra Œ± Œ¥`
where
- Œ¥ is the type of dimensions or units, which is an AddCommGroup with an equivalence relation
- Œ± is the type of scalars, which is a Semiring (we use a Field here for convenience)

This allows to use the machinery of AddMonoidAlgebra to prove lemmas about quantities.
For example, the multiplication of quantities is associative up to equivalence
-/
abbrev Formal (Œ¥ Œ±) [Field Œ±] [AddCommGroup Œ¥] [Setoid Œ¥] := AddMonoidAlgebra Œ± Œ¥

namespace Formal


@[coe]
noncomputable def toFormal (q : Quantity d Œ±) : Formal Œ¥ Œ± :=
  AddMonoidAlgebra.single d q.val

noncomputable instance instCoeFormal : CoeOut (Quantity d Œ±) (Formal Œ¥ Œ±) where
  coe := toFormal

@[simp]
theorem toFormal_inj (q‚ÇÅ q‚ÇÇ: Quantity d Œ±) :
  (q‚ÇÅ : Formal Œ¥ Œ±) = (q‚ÇÇ : Formal Œ¥ Œ±) ‚Üî q‚ÇÅ = q‚ÇÇ := by
  constructor
  ¬∑ simp only [toFormal, ‚Üê val_inj]
    intro h
    replace h := congr($h d)
    repeat rw [Finsupp.single_eq_same] at h
    exact h
  ¬∑ intro h
    rw [h]

@[simp]
theorem toFormal_cast (q : Quantity d‚ÇÅ Œ±) (h : d‚ÇÅ = d‚ÇÇ := by module) :
  ((q.cast (eq_imp_equiv h)):Formal Œ¥ Œ±) = (q:Formal Œ¥ Œ±) := by
  subst h
  rw [cast]

@[simp, norm_cast]
theorem toFormal_zero : ((0:Quantity d Œ±): Formal Œ¥ Œ±) = 0 := by
  simp only [toFormal, val_zero, Finsupp.single_zero]

@[simp, norm_cast]
theorem toFormal_one : ((1:Quantity (0:Œ¥) Œ±): Formal Œ¥ Œ±) = 1 := by
  simp only [toFormal, val_one]
  rfl

@[simp, norm_cast]
theorem toFormal_add (q‚ÇÅ q‚ÇÇ : Quantity d Œ±) :
  ((q‚ÇÅ + q‚ÇÇ:Quantity d Œ±):Formal Œ¥ Œ±) = (q‚ÇÅ:Formal Œ¥ Œ±) + (q‚ÇÇ:Formal Œ¥ Œ±) := by
  simp only [toFormal, val_add, Finsupp.single_add]

@[simp, norm_cast]
theorem toFormal_neg (q : Quantity d Œ±) :
  ((-q:Quantity d Œ±):Formal Œ¥ Œ±) = -(q:Formal Œ¥ Œ±) := by
  simp only [toFormal, val_neg, Finsupp.single_neg]

@[simp, norm_cast]
theorem toFormal_sub (q‚ÇÅ q‚ÇÇ : Quantity d Œ±) :
  ((q‚ÇÅ - q‚ÇÇ :Quantity d Œ±):Formal Œ¥ Œ±) = (q‚ÇÅ:Formal Œ¥ Œ±) - (q‚ÇÇ:Formal Œ¥ Œ±) := by
  simp only [toFormal, val_sub, Finsupp.single_sub]

@[norm_cast, simp]
theorem toFormal_pow (q : Quantity d Œ±) (n : ‚Ñï) :
  ((q ^·µà n):Formal Œ¥ Œ±) = (q:Formal Œ¥ Œ±) ^ n := by
  simp [toFormal, AddMonoidAlgebra.single_pow]

@[norm_cast, simp]
theorem toFormal_sq (q : Quantity d Œ±) :
  ((q¬≤):Formal Œ¥ Œ±) = (q:Formal Œ¥ Œ±) ^ 2 := by
  simp [toFormal, AddMonoidAlgebra.single_pow]

@[norm_cast, simp]
theorem toFormal_cube (q : Quantity d Œ±) :
  ((q¬≥):Formal Œ¥ Œ±) = (q:Formal Œ¥ Œ±) ^ 3 := by
  simp [toFormal, AddMonoidAlgebra.single_pow]


@[simp]
theorem pow_inv (q : Quantity d Œ±) (n : ‚Ñï) : (q ^·µà n)‚Åª¬π = ‚Üë(q‚Åª¬π ^·µà n) := by
  simp [‚ÜêtoFormal_inj, toFormal]

noncomputable instance instCoeReal : Coe Œ± (Formal Œ¥ Œ±) where
  coe a := ((a:Quantity (0:Œ¥) Œ±):Formal Œ¥ Œ±)

@[norm_cast, simp]
theorem coe_zero : ((0:Œ±): Formal Œ¥ Œ±) = 0 := by
  simp only [Quantity.coe_zero, toFormal_zero]

@[norm_cast, simp]
theorem coe_one : ((1:Œ±):Formal Œ¥ Œ±) = 1 := by
  rfl

@[norm_cast, simp]
theorem coe_nat (n : ‚Ñï) : ((n:Œ±):Formal Œ¥ Œ±) = (n:Formal Œ¥ Œ±) := by
  rfl

@[norm_cast, simp]
theorem coe_int (n : ‚Ñ§) : ((n:Œ±):Formal Œ¥ Œ±) = (n:Formal Œ¥ Œ±) := by
  rfl

@[norm_cast, simp]
theorem toFormal_smul (c : Œ±) (q : Quantity d Œ±)
  : ((c ‚Ä¢ q:Quantity d Œ±):Formal Œ¥ Œ±) = (c:Formal Œ¥ Œ±) * (q:Formal Œ¥ Œ±) := by
  simp only [toFormal, val_smul, _root_.smul_eq_mul, coe_val, AddMonoidAlgebra.single_mul_single,
    zero_add]

@[simp]
theorem smul_eq_mul (c : Œ±) (x : Formal Œ¥ Œ±) : c ‚Ä¢ x = (c:Formal Œ¥ Œ±) * x := by
  ext n
  rw [toFormal, coe_val]
  rw [Finsupp.smul_apply, AddMonoidAlgebra.single_zero_mul_apply, _root_.smul_eq_mul]

@[simp]
theorem nsmul_eq_mul (c : ‚Ñï) (x : Formal Œ¥ Œ±) : c ‚Ä¢ x = (c:Formal Œ¥ Œ±) * x := by
  rw [_root_.nsmul_eq_mul]

@[simp]
theorem zsmul_eq_mul (c : ‚Ñ§) (x : Formal Œ¥ Œ±) : c ‚Ä¢ x = (c : Formal Œ¥ Œ±) * x := by
  rw [_root_.zsmul_eq_mul]

end Formal

@[norm_cast, simp]
theorem coe_mul (a b : Œ±) : ((a*b:Œ±):Quantity (0: Œ¥) Œ±) = a ‚Ä¢ (b:Quantity (0:Œ¥) Œ±) := by
  simp only [ofField]
  rfl

instance instModule : Module Œ± (Quantity d Œ±) where
  smul_add c q‚ÇÅ q‚ÇÇ := by simp [‚ÜêFormal.toFormal_inj]; ring
  add_smul c1 c2 q := by simp [‚ÜêFormal.toFormal_inj]; ring
  one_smul q := by simp [‚ÜêFormal.toFormal_inj]
  zero_smul q := by simp [‚ÜêFormal.toFormal_inj]
  mul_smul c1 c2 q := by simp [‚ÜêFormal.toFormal_inj]; ring
  smul_zero c := by simp [‚ÜêFormal.toFormal_inj]

instance instMulAction : MulAction Œ± (Quantity d Œ±) where
  smul := (¬∑ ‚Ä¢ ¬∑)
  one_smul := by simp only [one_smul, implies_true]
  mul_smul := by simp only [mul_smul, implies_true]

@[simp]
theorem val_nsmul (c : ‚Ñï) (q : Quantity d Œ±) : (c ‚Ä¢ q).val = c * q.val := by
  simp [‚ÜêNat.cast_smul_eq_nsmul Œ±]

@[simp]
theorem val_zsmul (c : ‚Ñ§) (q : Quantity d Œ±) : (c ‚Ä¢ q).val = c * q.val := by
  simp [‚ÜêInt.cast_smul_eq_zsmul Œ±]

@[norm_cast, simp]
theorem toFormal_nsmul (c : ‚Ñï) (q : Quantity d Œ±)
  : ((c ‚Ä¢ q:Quantity d Œ±):Formal Œ¥ Œ±) = (c:Formal Œ¥ Œ±) * (q:Formal Œ¥ Œ±) := by
  simp [‚ÜêNat.cast_smul_eq_nsmul Œ±]

@[norm_cast, simp]
theorem toFormal_zsmul (c : ‚Ñ§) (q : Quantity d Œ±)
  : ((c ‚Ä¢ q:Quantity d Œ±):Formal Œ¥ Œ±) = (c:Formal Œ¥ Œ±) * (q:Formal Œ¥ Œ±) := by
  simp [‚ÜêInt.cast_smul_eq_zsmul Œ±]

@[norm_cast, simp]
theorem toFormal_mul (q‚ÇÅ : Quantity d‚ÇÅ Œ±) (q‚ÇÇ : Quantity d‚ÇÇ Œ±) :
  ((q‚ÇÅ * q‚ÇÇ:Quantity (d‚ÇÅ+d‚ÇÇ) Œ±):Formal Œ¥ Œ±) = (q‚ÇÅ:Formal Œ¥ Œ±) * (q‚ÇÇ:Formal Œ¥ Œ±) := by
  simp [Formal.toFormal, AddMonoidAlgebra.single_mul_single]

theorem mul_one (a : Quantity d‚ÇÅ Œ±) (h : d‚ÇÅ = d‚ÇÅ + d‚ÇÇ := by module) :
  a * (1: Quantity (d‚ÇÇ:Œ¥) Œ±) = a.cast (eq_imp_equiv h) := by
  rw [‚Üêval_inj,val_mul, val_one,_root_.mul_one]
  rfl

theorem mul_one' (a : Quantity d Œ±) :
  a * (1: Quantity (0:Œ¥) Œ±) = ‚Üëa := by
  rw [mul_one]

theorem one_mul (a : Quantity d‚ÇÇ Œ±) (h : d‚ÇÇ = d‚ÇÅ + d‚ÇÇ := by module) :
  (1: Quantity (d‚ÇÅ:Œ¥) Œ±) * a = a.cast (eq_imp_equiv h) := by
  rw [‚Üê val_inj, val_mul, val_one, _root_.one_mul]
  rfl

theorem one_mul' (a : Quantity d Œ±) :
  (1: Quantity (0:Œ¥) Œ±) * a = ‚Üëa := by
  rw [one_mul]

theorem mul_zero (a : Quantity d‚ÇÅ Œ±) (h : d‚ÇÅ = d‚ÇÅ + d‚ÇÇ := by module) :
  a * (0: Quantity (d‚ÇÇ:Œ¥) Œ±) = (0: Quantity d‚ÇÅ Œ±).cast (eq_imp_equiv h) := by
  rw [‚Üê val_inj, val_mul, val_zero, MulZeroClass.mul_zero]
  rfl

theorem mul_zero' (a : Quantity d Œ±) :
  a * (0: Quantity (0:Œ¥) Œ±) = ‚Üë(0: Quantity d Œ±) := by
  rw [mul_zero]

theorem zero_mul (a : Quantity d‚ÇÇ Œ±) (h : d‚ÇÇ = d‚ÇÅ + d‚ÇÇ := by module) :
  (0: Quantity (d‚ÇÅ:Œ¥) Œ±) * a = (0: Quantity d‚ÇÇ Œ±).cast (eq_imp_equiv h) := by
  rw [‚Üê val_inj, val_mul, val_zero, MulZeroClass.zero_mul]
  rfl

theorem zero_mul' (a : Quantity d Œ±) :
  (0: Quantity (0:Œ¥) Œ±) * a = ‚Üë(0: Quantity d Œ±) := by
  rw [zero_mul]

theorem mul_eq_zero {a : Quantity d‚ÇÅ Œ±} {b : Quantity d‚ÇÇ Œ±} :
  a * b = 0 ‚Üî a = 0 ‚à® b = 0 := by
  simp only [‚Üê val_inj, val_mul, val_zero, _root_.mul_eq_zero]

@[simp]
theorem mul_inv_cancel (a : Quantity d Œ±) [h : NeZero a] :
  a * a‚Åª¬π = ‚Üë(1: Quantity (0:Œ¥) Œ±) := by
  rw [neZero_iff] at h
  rw [‚Üê val_inj, val_mul, val_inv, cast_val, val_one]
  exact mul_inv_cancel‚ÇÄ h

@[simp]
theorem inv_mul_cancel (a : Quantity d Œ±) [h : NeZero a] :
  a‚Åª¬π * a = ‚Üë(1: Quantity (0:Œ¥) Œ±) := by
  rw [neZero_iff] at h
  rw [‚Üê val_inj, val_mul, val_inv, cast_val, val_one]
  exact inv_mul_cancel‚ÇÄ h

theorem mul_comm (a : Quantity d‚ÇÅ Œ±) (b : Quantity d‚ÇÇ Œ±) :
  a * b = ‚Üë(b * a) := by
  rw [‚ÜêFormal.toFormal_inj, Formal.toFormal_cast]
  repeat rw [toFormal_mul]
  ring

theorem mul_assoc (a : Quantity d‚ÇÅ Œ±) (b : Quantity d‚ÇÇ Œ±) (c : Quantity d‚ÇÉ Œ±) :
  a * (b * c) = ‚Üë((a * b) * c) := by
  rw [‚ÜêFormal.toFormal_inj, Formal.toFormal_cast]
  repeat rw [toFormal_mul]
  ring

theorem conj_eq_self (a : Quantity d‚ÇÅ Œ±) (b : Quantity d‚ÇÇ Œ±) [h : NeZero a] :
  a‚Åª¬π * b * a = ‚Üëb := by
  rw [mul_comm, mul_assoc, mul_inv_cancel, ‚Üê Formal.toFormal_inj]
  simp

theorem conj_eq_self' (a : Quantity d‚ÇÅ Œ±) (b : Quantity d‚ÇÇ Œ±) [h : NeZero a] :
  a * b * a‚Åª¬π = ‚Üëb := by
  rw [mul_comm, mul_assoc, inv_mul_cancel, ‚Üê Formal.toFormal_inj]
  simp

theorem left_distrib (a : Quantity d‚ÇÅ Œ±) (b c : Quantity d‚ÇÇ Œ±) :
  a * (b + c) = ‚Üë(a * b + a * c) := by
  simp [‚ÜêFormal.toFormal_inj]
  ring

theorem right_distrib (a b : Quantity d‚ÇÅ Œ±) (c : Quantity d‚ÇÇ Œ±) :
  (a + b) * c = ‚Üë(a * c + b * c) := by
  simp [‚ÜêFormal.toFormal_inj]
  ring

theorem square_add (a b : Quantity d Œ±) : (a + b) ^·µà (2:‚Ñï) = a ^·µà 2 + ‚Üë(2 ‚Ä¢ a * b) + b ^·µà 2 := by
  simp only [‚Üê Formal.toFormal_inj, Formal.toFormal_pow, Formal.toFormal_add]
  rw [Formal.toFormal_cast, toFormal_mul, toFormal_nsmul, Nat.cast_ofNat]
  ring

theorem sq_add (a b : Quantity d Œ±) : (a + b)¬≤ = a¬≤ + ‚Üë(2 ‚Ä¢ a * b) + b¬≤ := by
  simp [‚Üê Formal.toFormal_inj]
  rw [Formal.toFormal_cast, toFormal_mul, toFormal_nsmul, Nat.cast_ofNat]
  ring

@[simp]
theorem dim_def [HasDimension Œ¥] (q : Quantity d Œ±) : q.dimension = HasDimension.dimension d := rfl

end Units.Quantity
